# $Revision: 1.1 $ ($Date: 1998/08/31 18:54:07 $)
# Sample foundry configuration file
#
# By default, startfoundry reads the file /etc/foundry.conf although
# you can change that with "-config" option when you start the
# foundry.  Each entry should be on its own line.  A newline
# terminates an entry.
#
# PORT entry.  This is the default, change it to whatever you want or
# leave it out (this is the hard-coded default).  This is the port
# that is used by the startfoundry, stopfoundry, and foundryservice
# commands (if they use this configuration file, that is).
PORT 1251

# STATUS directory entry.  This field should specify the parent
# directory of the location of the /foundry status directory.  This
# directory is used to store files detailing specific internal
# features of the foundry.  For example, many logs are stored here
# which may be queried by external programs to display foundry status.
STATUS .\logs

#INIT_ACTOR_MESSAGE osl.examples.network.Net boot 192.168.1.126
#INIT_ACTOR_MESSAGE osl.examples.fibonacci.DistFibActor boot 23 192.168.1.126
# INIT_ACTOR_MESSAGE osl.examples.tester.Tester test 192.168.0.138
#INIT_ACTOR_MESSAGE osl.examples.sor.SorRunner boot 0 128.174.245.87 
# this shows what actor to initiate and what message to send to it
#     for a remote system. So IP is of the remote system
#INIT_ACTOR_MESSAGE osl.examples.network.Net boot 192.17.236.212
#INIT_ACTOR_MESSAGE osl.examples.remoteping.PingBoot boot 192.168.1.126
#INIT_ACTOR_MESSAGE reza.rCloud.Test boot

#INIT_ACTOR_MESSAGE osl.examples.helloworld.HelloActor hello
INIT_ACTOR_MESSAGE osl.examples.garbage.GCRoot boot
#INIT_ACTOR_MESSAGE osl.examples.garbage.GCRoot boot 192.168.0.104

# Module entries.  Each module entry is of the form:
#	MODULE CompleteClassPath Alias [Args]
# where [Args] is an optional list of arguments to supply to the
# initialization function of the new module.  If an optional argument
# is prefixed with a '@' then it is treated as an alias and is replaced
# with the object associated with the given alias.  Otherwise, all
# module arguments as passed as strings.  Compound strings may be
# passed by quoting their contents (e.g. 'this is a single argument').
# Modules are instantiated in the order they are specified so that
# aliases may only refer to previosuly created modules (i.e. there
# can't be cycles in module referneces).  The initialization method
# called is the one that best matches the given list of arguments.  If
# no matching method is found, an error message is printed and the
# foundry is terminated.  Note that each module is expected to
# implement the interface given by its name.

# Module    Classpath                                 Alias     Args
#########################################################################################
# Scheduler Notes: Use the BasicScheduler if you're not sure about the
# fairness properties of Java's scheduler.  Use the NoScheduler
# otherwise.  If you're using Solaris Native Threads, it's a good idea 
# to use NoScheduler.
#
# SCHEDULER   osl.scheduler.basic.BasicScheduler        scheduler
# SCHEDULER   osl.scheduler.none.NoScheduler            scheduler

SCHEDULER   osl.scheduler.continuations.FairContinuationsBasedScheduler        scheduler

# Transport Notes: The TCP transport implementation is horrendously
# out of date and hasn't been worked on for some time (any
# volunteers?).  Our tests show that UDP is much faster anyway.  These 
# are both reliable transports by the way.  Note that the transport
# layer requires the name of the host on which the machine is
# running.  The shell substituion $HOST usually works, so that's what
# is here.
#

TRANSPORT   osl.transport.udp.UDPTransportLayer       transport @scheduler 192.168.0.100

#TRANSPORT   osl.transport.tcp.TCPTransportLayer	      transport @scheduler 127.0.0.1


# Nameservice Notes: If your running on a single subnet, use the
# "subnet" implementation.  Otherwise, use the "simple"
# implementation.
#
# NAMESERVICE osl.nameservice.subnet.LocalNameService   ns        @scheduler your.machine.name your.subnet.IP.255 8009

NAMESERVICE osl.nameservice.simple.DefaultNameService ns        @scheduler @transport

HANDLER     osl.handler.RequestHandler                handler   @scheduler @transport @ns

MANAGER     osl.manager.basic.BasicActorManager	      manager	@scheduler @handler
ACTOR_IMPLEMENTOR osl.manager.basic.BasicActorImpl

# Service Notes --
#
# YP: Allows actors to lookup the ActorManagerName of managers running 
# on other nodes.  These other nodes must also be running the YP
# service on the same port.  Also allows actor names to be mapped to
# the manager running those actors.
#
# Shell: Installs the ShellService protocol on the local manager.  The 
# fshell Tcl program is a front end for this service.

SERVICE	    osl.service.yp.YP			      yp        @scheduler @manager   @transport @handler 11970
SERVICE     osl.service.shell.Shell		      shell     @scheduler @manager   11971
