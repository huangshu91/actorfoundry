/* Generated By: 1.3 $ ($Date&JavaCC: Do not edit this line. ActorShellParser.java */
package osl.service.shell;

public class ActorShellParser implements ActorShellParserConstants {

	/**
	 * The current implementation that will be created by a "create" command.
	 * This value is initialized to the basic implementation when the parser is
	 * created.
	 */
	String createImpl = "osl.manager.basic.BasicActorImpl";

	/**
	 * The location where the next new actor will be created. This is either
	 * null or the name of a shell variable. It is initialized to null.
	 */
	String createLoc = "null";

	// This is just for testing
	public static void main(String args[]) {
		ActorShellParser parser;

		// For testing, always read from stdin
		parser = new ActorShellParser(System.in);
		try {
			System.out.println(parser.ShellCommand());
		} catch (ParseException e) {
			System.out.println(e.getMessage());
		}
	}

	// Convert escape sequeces in STRING_LITERAL
	String convertEscape(String in) {
		String newString = "";

		for (int i = 0; i < in.length(); i++) {
			if (in.charAt(i) == '\\') {
				if (((i + 1) < in.length()) && (in.charAt(i + 1) != '\\')) {
					i++;
					switch (in.charAt(i)) {
					case 'n':
						newString += '\n';
						break;
					case 't':
						newString += '\t';
						break;
					case 'b':
						newString += '\b';
						break;
					case 'r':
						newString += '\r';
						break;
					case 'f':
						newString += '\f';
						break;
					default:
						// Attempt to convert octal char
						if (Character.isDigit(in.charAt(i))) {
							int one, two, three;
							one = Character.digit(in.charAt(i), 10);
							if (one > 3) {
								two = one;
								one = 0;
								i++;
								if (Character.isDigit(in.charAt(i)))
									three = Character.digit(in.charAt(i), 10);
								else {
									three = two;
									two = 0;
									i--;
								}
							} else {
								i++;
								if (Character.isDigit(in.charAt(i))) {
									two = Character.digit(in.charAt(i), 10);
									i++;
									if (Character.isDigit(in.charAt(i)))
										three = Character.digit(in.charAt(i),
												10);
									else {
										three = two;
										two = one = 0;
										i--;
									}
								} else {
									three = one;
									one = two = 0;
									i--;
								}
							}

							newString += (char) ((one * 64) + (two * 8) + three);

						} // otherwise just skip it
					}
				} else
					newString += in.charAt(i);
			} else
				newString += in.charAt(i);
		}

		return newString;
	}

	/******************************
	 * SHELL GRAMMAR STARTS HERE *
	 ******************************/
	/**
	 * @exception osl.service.shell.ParseException
	 *                Thrown if a parse error is encountered while parsing a
	 *                shell command.
	 */
	final public String ShellCommand() throws ParseException {
		String v1 = "", v2 = "";
		Token val;
		if (jj_2_1(2)) {
			jj_consume_token(NEWLINE);
			{
				if (true)
					return "NOP";
			}
		} else {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case CLOSE:
				jj_consume_token(CLOSE);
				jj_consume_token(NEWLINE);
				{
					if (true)
						return "close";
				}
				break;
			case RECONNECT:
				jj_consume_token(RECONNECT);
				jj_consume_token(NEWLINE);
				{
					if (true)
						return "reconnect";
				}
				break;
			case INST:
				jj_consume_token(INST);
				v1 = Name();
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case TRUTH:
				case FALSITY:
				case NULL:
				case INTEGER_LITERAL:
				case FLOATING_POINT_LITERAL:
				case CHARACTER_LITERAL:
				case STRING_LITERAL:
				case SHELL_VAR:
				case GLOBAL_SHELL_VAR:
				case SHELL_VAR_ARRAY:
				case GLOBAL_SHELL_VAR_ARRAY:
				case SELF_VAR:
				case IDENTIFIER:
				case 45:
					v2 = ArgList();
					break;
				default:
					jj_la1[0] = jj_gen;
					;
				}
				jj_consume_token(NEWLINE);
				{
					if (true)
						return "instobj " + v1 + " " + v2 + " SV_END";
				}
				break;
			case INVOKE:
				jj_consume_token(INVOKE);
				v1 = Arg();
				val = jj_consume_token(IDENTIFIER);
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case TRUTH:
				case FALSITY:
				case NULL:
				case INTEGER_LITERAL:
				case FLOATING_POINT_LITERAL:
				case CHARACTER_LITERAL:
				case STRING_LITERAL:
				case SHELL_VAR:
				case GLOBAL_SHELL_VAR:
				case SHELL_VAR_ARRAY:
				case GLOBAL_SHELL_VAR_ARRAY:
				case SELF_VAR:
				case IDENTIFIER:
				case 45:
					v2 = ArgList();
					break;
				default:
					jj_la1[1] = jj_gen;
					;
				}
				jj_consume_token(NEWLINE);
				{
					if (true)
						return "invoke " + v1 + " " + val.image + " " + v2
								+ " SV_END";
				}
				break;
			case PRINT:
				jj_consume_token(PRINT);
				v1 = Arg();
				jj_consume_token(NEWLINE);
				{
					if (true)
						return "print " + v1 + " SV_END";
				}
				break;
			case MAKEGLOBAL:
				jj_consume_token(MAKEGLOBAL);
				v1 = Arg();
				jj_consume_token(NEWLINE);
				{
					if (true)
						return "makeglobal " + v1 + " SV_END";
				}
				break;
			case CREATEIMPL:
				jj_consume_token(CREATEIMPL);
				v1 = Name();
				jj_consume_token(NEWLINE);
				createImpl = v1;
				{
					if (true)
						return "NOP";
				}
				break;
			case CREATELOC:
				jj_consume_token(CREATELOC);
				v1 = Arg();
				jj_consume_token(NEWLINE);
				createLoc = v1;
				{
					if (true)
						return "NOP";
				}
				break;
			case CREATE:
				jj_consume_token(CREATE);
				v1 = Name();
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case TRUTH:
				case FALSITY:
				case NULL:
				case INTEGER_LITERAL:
				case FLOATING_POINT_LITERAL:
				case CHARACTER_LITERAL:
				case STRING_LITERAL:
				case SHELL_VAR:
				case GLOBAL_SHELL_VAR:
				case SHELL_VAR_ARRAY:
				case GLOBAL_SHELL_VAR_ARRAY:
				case SELF_VAR:
				case IDENTIFIER:
				case 45:
					v2 = ArgList();
					break;
				default:
					jj_la1[2] = jj_gen;
					;
				}
				jj_consume_token(NEWLINE);
				{
					if (true)
						return "create " + createLoc + " " + createImpl + " "
								+ v1 + " " + v2 + " SV_END";
				}
				break;
			case SEND:
				jj_consume_token(SEND);
				v1 = Arg();
				val = jj_consume_token(IDENTIFIER);
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case TRUTH:
				case FALSITY:
				case NULL:
				case INTEGER_LITERAL:
				case FLOATING_POINT_LITERAL:
				case CHARACTER_LITERAL:
				case STRING_LITERAL:
				case SHELL_VAR:
				case GLOBAL_SHELL_VAR:
				case SHELL_VAR_ARRAY:
				case GLOBAL_SHELL_VAR_ARRAY:
				case SELF_VAR:
				case IDENTIFIER:
				case 45:
					v2 = ArgList();
					break;
				default:
					jj_la1[3] = jj_gen;
					;
				}
				jj_consume_token(NEWLINE);
				{
					if (true)
						return "send " + v1 + " " + val.image + " " + v2
								+ " SV_END";
				}
				break;
			case MSGQUEUESIZE:
				jj_consume_token(MSGQUEUESIZE);
				jj_consume_token(NEWLINE);
				{
					if (true)
						return "msgqueuesize SV_END";
				}
				break;
			case MSGGETMETHOD:
				jj_consume_token(MSGGETMETHOD);
				jj_consume_token(NEWLINE);
				{
					if (true)
						return "msggetmethod SV_END";
				}
				break;
			case MSGGETARGS:
				jj_consume_token(MSGGETARGS);
				jj_consume_token(NEWLINE);
				{
					if (true)
						return "msggetargs SV_END";
				}
				break;
			case MSGGETSENDER:
				jj_consume_token(MSGGETSENDER);
				jj_consume_token(NEWLINE);
				{
					if (true)
						return "msggetsender SV_END";
				}
				break;
			case MSGISRPC:
				jj_consume_token(MSGISRPC);
				jj_consume_token(NEWLINE);
				{
					if (true)
						return "msgisrpc SV_END";
				}
				break;
			case MSGGETTAGS:
				jj_consume_token(MSGGETTAGS);
				jj_consume_token(NEWLINE);
				{
					if (true)
						return "msggettags SV_END";
				}
				break;
			case DELMSG:
				jj_consume_token(DELMSG);
				jj_consume_token(NEWLINE);
				{
					if (true)
						return "msgdelete SV_END";
				}
				break;
			case SERVICE:
				jj_consume_token(SERVICE);
				v1 = Arg();
				val = jj_consume_token(IDENTIFIER);
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case TRUTH:
				case FALSITY:
				case NULL:
				case INTEGER_LITERAL:
				case FLOATING_POINT_LITERAL:
				case CHARACTER_LITERAL:
				case STRING_LITERAL:
				case SHELL_VAR:
				case GLOBAL_SHELL_VAR:
				case SHELL_VAR_ARRAY:
				case GLOBAL_SHELL_VAR_ARRAY:
				case SELF_VAR:
				case IDENTIFIER:
				case 45:
					v2 = ArgList();
					break;
				default:
					jj_la1[4] = jj_gen;
					;
				}
				jj_consume_token(NEWLINE);
				{
					if (true)
						return "service " + v1 + " " + val.image + " " + v2
								+ " SV_END";
				}
				break;
			case TYPEIT:
				jj_consume_token(TYPEIT);
				val = jj_consume_token(STRING_LITERAL);
				jj_consume_token(NEWLINE);
				String arg = convertEscape(val.image);
				arg = arg.substring(1);
				arg = arg.substring(0, arg.length() - 1);
				{
					if (true)
						return "type!" + arg;
				}
				break;
			default:
				jj_la1[5] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public String ArgList() throws ParseException {
		String ret, v;
		ret = Arg();
		label_1: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case TRUTH:
			case FALSITY:
			case NULL:
			case INTEGER_LITERAL:
			case FLOATING_POINT_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case SHELL_VAR:
			case GLOBAL_SHELL_VAR:
			case SHELL_VAR_ARRAY:
			case GLOBAL_SHELL_VAR_ARRAY:
			case SELF_VAR:
			case IDENTIFIER:
			case 45:
				;
				break;
			default:
				jj_la1[6] = jj_gen;
				break label_1;
			}
			v = Arg();
			ret = ret + " " + v;
		}
		{
			if (true)
				return ret;
		}
		throw new Error("Missing return statement in function");
	}

	final public String Arg() throws ParseException {
		Token val;
		String ret;
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case SHELL_VAR:
			val = jj_consume_token(SHELL_VAR);
			{
				if (true)
					return val.image;
			}
			break;
		case GLOBAL_SHELL_VAR:
			val = jj_consume_token(GLOBAL_SHELL_VAR);
			{
				if (true)
					return val.image;
			}
			break;
		case SELF_VAR:
			val = jj_consume_token(SELF_VAR);
			{
				if (true)
					return val.image;
			}
			break;
		case SHELL_VAR_ARRAY:
			val = jj_consume_token(SHELL_VAR_ARRAY);
			{
				if (true)
					return val.image;
			}
			break;
		case GLOBAL_SHELL_VAR_ARRAY:
			val = jj_consume_token(GLOBAL_SHELL_VAR_ARRAY);
			{
				if (true)
					return val.image;
			}
			break;
		case TRUTH:
			jj_consume_token(TRUTH);
			{
				if (true)
					return "true";
			}
			break;
		case FALSITY:
			jj_consume_token(FALSITY);
			{
				if (true)
					return "false";
			}
			break;
		case NULL:
			jj_consume_token(NULL);
			{
				if (true)
					return "null";
			}
			break;
		case CHARACTER_LITERAL:
			val = jj_consume_token(CHARACTER_LITERAL);
			{
				if (true)
					return "C:"
							+ val.image.substring(1, val.image.length() - 2);
			}
			break;
		case FLOATING_POINT_LITERAL:
			val = jj_consume_token(FLOATING_POINT_LITERAL);
			Float v1;
			Double v2;

			switch (val.image.charAt(val.image.length() - 1)) {
			case 'f':
			case 'F':
				try {
					v1 = new Float(val.image);
					{
						if (true)
							return "F:" + v1.toString();
					}
				} catch (NumberFormatException f1) {
					{
						if (true)
							throw new ParseException("Expression " + val.image
									+ " is not a valid Float value.");
					}
				}
				break;

			case 'd':
			case 'D':
				try {
					v2 = new Double(val.image);
					{
						if (true)
							return "D:" + v2.toString();
					}
				} catch (NumberFormatException f1) {
					{
						if (true)
							throw new ParseException("Expression " + val.image
									+ " is not a valid Double value.");
					}
				}
				break;

			default:
				// Try float first, then double, else throw a ParseException
				try {
					v1 = new Float(val.image);
					{
						if (true)
							return "F:" + v1.toString();
					}
				} catch (NumberFormatException f1) {
					try {
						v2 = new Double(val.image);
						{
							if (true)
								return "D:" + v2.toString();
						}
					} catch (NumberFormatException f2) {
						{
							if (true)
								throw new ParseException(
										"Expression "
												+ val.image
												+ " is not a valid Float or Double value.");
						}
					}
				}
			}
			break;
		case INTEGER_LITERAL:
			val = jj_consume_token(INTEGER_LITERAL);
			Integer i1;
			Long i2;

			switch (val.image.charAt(val.image.length() - 1)) {
			case 'l':
			case 'L':
				try {
					// For some annoying reason, the Integer constructor doesn't
					// parse expressions like 10L correctly. Instead, it returns
					// a NumberFormatException, so we have to parse with the
					// trailing L removed.
					i2 = new Long(val.image
							.substring(0, val.image.length() - 1));
					{
						if (true)
							return "L:" + i2.toString();
					}
				} catch (NumberFormatException f1) {
					{
						if (true)
							throw new ParseException("Expression " + val.image
									+ " is not a valid Long value.");
					}
				}
				break;

			default:
				// Try integer first, then long, else throw a ParseException
				try {
					i1 = new Integer(val.image);
					{
						if (true)
							return "I:" + i1.toString();
					}
				} catch (NumberFormatException f1) {
					try {
						i2 = new Long(val.image);
						{
							if (true)
								return "L:" + i2.toString();
						}
					} catch (NumberFormatException f2) {
						{
							if (true)
								throw new ParseException(
										"Expression "
												+ val.image
												+ " is not a valid Integer or Long value.");
						}
					}
				}
			}
			break;
		case STRING_LITERAL:
			val = jj_consume_token(STRING_LITERAL);
			{
				if (true)
					return val.image;
			}
			break;
		case IDENTIFIER:
			val = jj_consume_token(IDENTIFIER);
			{
				if (true)
					return val.image;
			}
			break;
		default:
			jj_la1[7] = jj_gen;
			if (jj_2_2(2)) {
				jj_consume_token(45);
				ret = Name();
				jj_consume_token(46);
				{
					if (true)
						return "<" + ret + ">";
				}
			} else {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case 45:
					jj_consume_token(45);
					ret = Name();
					jj_consume_token(47);
					val = jj_consume_token(IDENTIFIER);
					jj_consume_token(46);
					{
						if (true)
							return "<" + ret + ":" + val.image + ">";
					}
					break;
				default:
					jj_la1[8] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
				}
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public String Name() throws ParseException {
		Token val;
		String ret;
		val = jj_consume_token(IDENTIFIER);
		ret = val.image;
		label_2: while (true) {
			if (jj_2_3(3)) {
				;
			} else {
				break label_2;
			}
			jj_consume_token(DOT);
			val = jj_consume_token(IDENTIFIER);
			ret = ret + "." + val.image;
		}
		{
			if (true)
				return ret;
		}
		throw new Error("Missing return statement in function");
	}

	final private boolean jj_2_1(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		boolean retval = !jj_3_1();
		jj_save(0, xla);
		return retval;
	}

	final private boolean jj_2_2(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		boolean retval = !jj_3_2();
		jj_save(1, xla);
		return retval;
	}

	final private boolean jj_2_3(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		boolean retval = !jj_3_3();
		jj_save(2, xla);
		return retval;
	}

	final private boolean jj_3_1() {
		if (jj_scan_token(NEWLINE))
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		return false;
	}

	final private boolean jj_3_3() {
		if (jj_scan_token(DOT))
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		if (jj_scan_token(IDENTIFIER))
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		return false;
	}

	final private boolean jj_3R_3() {
		if (jj_scan_token(IDENTIFIER))
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		return false;
	}

	final private boolean jj_3_2() {
		if (jj_scan_token(45))
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		if (jj_3R_3())
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			return false;
		return false;
	}

	public ActorShellParserTokenManager token_source;
	ASCII_UCodeESC_CharStream jj_input_stream;
	public Token token, jj_nt;
	private int jj_ntk;
	private Token jj_scanpos, jj_lastpos;
	private int jj_la;
	public boolean lookingAhead = false;
	// private boolean jj_semLA;
	private int jj_gen;
	final private int[] jj_la1 = new int[9];
	final private int[] jj_la1_0 = { 0x2e000000, 0x2e000000, 0x2e000000,
			0x2e000000, 0x2e000000, 0xffffe0, 0x2e000000, 0x2e000000, 0x0, };
	final private int[] jj_la1_1 = { 0x27fa, 0x27fa, 0x27fa, 0x27fa, 0x27fa,
			0x0, 0x27fa, 0x7fa, 0x2000, };
	final private JJActorShellParserCalls[] jj_2_rtns = new JJActorShellParserCalls[3];
	private boolean jj_rescan = false;
	private int jj_gc = 0;

	public ActorShellParser(java.io.InputStream stream) {
		jj_input_stream = new ASCII_UCodeESC_CharStream(stream, 1, 1);
		token_source = new ActorShellParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 9; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJActorShellParserCalls();
	}

	public void ReInit(java.io.InputStream stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 9; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJActorShellParserCalls();
	}

	public ActorShellParser(ActorShellParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 9; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJActorShellParserCalls();
	}

	public void ReInit(ActorShellParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 9; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJActorShellParserCalls();
	}

	final private Token jj_consume_token(int kind) throws ParseException {
		Token oldToken;
		if ((oldToken = token).next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		if (token.kind == kind) {
			jj_gen++;
			if (++jj_gc > 100) {
				jj_gc = 0;
				for (int i = 0; i < jj_2_rtns.length; i++) {
					JJActorShellParserCalls c = jj_2_rtns[i];
					while (c != null) {
						if (c.gen < jj_gen)
							c.first = null;
						c = c.next;
					}
				}
			}
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	final private boolean jj_scan_token(int kind) {
		if (jj_scanpos == jj_lastpos) {
			jj_la--;
			if (jj_scanpos.next == null) {
				jj_lastpos = jj_scanpos = jj_scanpos.next = token_source
						.getNextToken();
			} else {
				jj_lastpos = jj_scanpos = jj_scanpos.next;
			}
		} else {
			jj_scanpos = jj_scanpos.next;
		}
		if (jj_rescan) {
			int i = 0;
			Token tok = token;
			while (tok != null && tok != jj_scanpos) {
				i++;
				tok = tok.next;
			}
			if (tok != null)
				jj_add_error_token(kind, i);
		}
		return (jj_scanpos.kind != kind);
	}

	final public Token getNextToken() {
		if (token.next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		jj_gen++;
		return token;
	}

	final public Token getToken(int index) {
		Token t = lookingAhead ? jj_scanpos : token;
		for (int i = 0; i < index; i++) {
			if (t.next != null)
				t = t.next;
			else
				t = t.next = token_source.getNextToken();
		}
		return t;
	}

	final private int jj_ntk() {
		if ((jj_nt = token.next) == null)
			return (jj_ntk = (token.next = token_source.getNextToken()).kind);
		else
			return (jj_ntk = jj_nt.kind);
	}

	private java.util.Vector<Object> jj_expentries = new java.util.Vector<Object>();
	private int[] jj_expentry;
	private int jj_kind = -1;
	private int[] jj_lasttokens = new int[100];
	private int jj_endpos;

	private void jj_add_error_token(int kind, int pos) {
		if (pos >= 100)
			return;
		if (pos == jj_endpos + 1) {
			jj_lasttokens[jj_endpos++] = kind;
		} else if (jj_endpos != 0) {
			jj_expentry = new int[jj_endpos];
			for (int i = 0; i < jj_endpos; i++) {
				jj_expentry[i] = jj_lasttokens[i];
			}
			boolean exists = false;
			for (java.util.Enumeration<Object> enum_old = jj_expentries
					.elements(); enum_old.hasMoreElements();) {
				int[] oldentry = (int[]) (enum_old.nextElement());
				if (oldentry.length == jj_expentry.length) {
					exists = true;
					for (int i = 0; i < jj_expentry.length; i++) {
						if (oldentry[i] != jj_expentry[i]) {
							exists = false;
							break;
						}
					}
					if (exists)
						break;
				}
			}
			if (!exists)
				jj_expentries.addElement(jj_expentry);
			if (pos != 0)
				jj_lasttokens[(jj_endpos = pos) - 1] = kind;
		}
	}

	final public ParseException generateParseException() {
		jj_expentries.removeAllElements();
		boolean[] la1tokens = new boolean[48];
		for (int i = 0; i < 48; i++) {
			la1tokens[i] = false;
		}
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 9; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1 << j)) != 0) {
						la1tokens[j] = true;
					}
					if ((jj_la1_1[i] & (1 << j)) != 0) {
						la1tokens[32 + j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 48; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.addElement(jj_expentry);
			}
		}
		jj_endpos = 0;
		jj_rescan_token();
		jj_add_error_token(0, 0);
		int[][] exptokseq = new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = (int[]) jj_expentries.elementAt(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}

	final public void enable_tracing() {
	}

	final public void disable_tracing() {
	}

	final private void jj_rescan_token() {
		jj_rescan = true;
		for (int i = 0; i < 3; i++) {
			JJActorShellParserCalls p = jj_2_rtns[i];
			do {
				if (p.gen > jj_gen) {
					jj_la = p.arg;
					jj_lastpos = jj_scanpos = p.first;
					switch (i) {
					case 0:
						jj_3_1();
						break;
					case 1:
						jj_3_2();
						break;
					case 2:
						jj_3_3();
						break;
					}
				}
				p = p.next;
			} while (p != null);
		}
		jj_rescan = false;
	}

	final private void jj_save(int index, int xla) {
		JJActorShellParserCalls p = jj_2_rtns[index];
		while (p.gen > jj_gen) {
			if (p.next == null) {
				p = p.next = new JJActorShellParserCalls();
				break;
			}
			p = p.next;
		}
		p.gen = jj_gen + xla - jj_la;
		p.first = token;
		p.arg = xla;
	}

}

final class JJActorShellParserCalls {
	int gen;
	Token first;
	int arg;
	JJActorShellParserCalls next;
}
