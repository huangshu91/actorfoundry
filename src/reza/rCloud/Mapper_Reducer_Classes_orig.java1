import java.io.IOException;
import java.lang.InterruptedException;
import java.util.StringTokenizer;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.GenericOptionsParser;

public class Mapper_Reducer_Classes {
	/**
	 * The map class of WordCount.
	 */
	public static class Mapper_Class
	    extends Mapper<Object, Text, Text, IntWritable> {
	        
	    private final static IntWritable one = new IntWritable(1);
	    private Text word = new Text();

	    public void map(Object key, Text value, Context context)
	        throws IOException, InterruptedException {
	        StringTokenizer itr = new StringTokenizer(value.toString());
	        while (itr.hasMoreTokens()) {
	            word.set(itr.nextToken());
	            context.write(word, one);
	        }
	    }
	}
	/**
	 * The reducer class of WordCount
	 */
	public static class Reducer_Class
	    extends Reducer<Text, IntWritable, Text, IntWritable> {
	    public void reduce(Text key, Iterable<IntWritable> values, Context context)
	        throws IOException, InterruptedException {
	        int sum = 0;
	        for (IntWritable value : values) {
	            sum += value.get();
	        }
	        context.write(key, new IntWritable(sum));
	    }
	}
}
